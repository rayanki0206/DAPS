name: Prod-Deploy-SynapseScripts

on:       
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      appshortcode:
          description: 'Application Shortcode: GLSM'
          required: true
          type: string
      location:
          description: 'app location'
          required: true
          default: "eastus"
          type: choice
          options:
            - eastus
            - westus
            - westeurope
            - northeurope
            - amsterdam
            - ashburn
      environment:
          description: 'environments: dev/qa'
          required: true
          type: choice
          options:
            - prod
      functional_area:
          description: 'functionalarea: Global Services/DataOps/IT/M&Q/R&D'
          required: true
          type: choice
          options:
            - commercial
            - dataops
            - it
            - global services
            - m&q
            - r&d
      data_product_name:
          description: 'dataproductname: Service Management'
          required: true
          default: "Service Management"
          type: string
      datalake_name:
            description: 'datalake name: bdaze1irddl01'
            required: true
            type: string
      synapse_externaldata_fileformat:
          description: 'external datasource file format:JSON/PARQUET/ORC/DELIMITEDTEXT'
          required: true
          type: choice
          options:
            - JSON
            - PARQUET
            - ORC
            - DELIMITEDTEXT

jobs:
  build:
    if: contains('["Gopala-Rakesh","rahulgundam-elanco","ScottHHuston"]',github.actor)
    runs-on: ubuntu-latest

    steps:
        
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: master
          path: infra/envs/dev
        
      - name: Provide execution permissions to replacement script
        working-directory: infra/envs/dev
        run: | 
          cd synapse
          chmod 777 ./checkfile.sh
          chmod 777 ./get_subscription_id.sh

      - name: Log in Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.PRODAZURECREDENTIALS }}
        
      - name: Check if inputs.auto.tfvars exists
        working-directory: infra/envs/dev
        run: |
          cd synapse
          ls
          ./checkfile.sh

      # Add a step to fetch the subscription ID
      - name: Get Subscription ID
        id: get_subscription_id
        working-directory: infra/envs/dev
        run: |
          cd synapse
          subscription_id=$(bash ./get_subscription_id.sh "${{ github.event.inputs.functional_area }}" "${{ github.event.inputs.environment }}")
          echo "subscription_id=$subscription_id" >> $GITHUB_ENV
          echo "$subscription_id"

      # Use the subscription ID in subsequent steps if needed
      - name: set Subscription ID
        working-directory: infra/envs/dev
        run: |
          cd synapse
          az account set --subscription $env:subscription_id    

      - name: Generate inputs.auto.tfvars
        working-directory: infra/envs/dev  
        run: |
          cd synapse
          echo "appmnemonic = \"${{ github.event.inputs.appshortcode }}\"" >> inputs.tfvars
          echo "location = \"${{ github.event.inputs.location }}\"" >> inputs.tfvars
          echo "environment = \"${{ github.event.inputs.environment }}\"" >> inputs.tfvars
          echo "functional_area = \"${{ github.event.inputs.functional_area }}\"" >> inputs.tfvars
          echo "data_product_name = \"${{ github.event.inputs.data_product_name }}\"" >> inputs.tfvars
          
          cat inputs.tfvars
          ls
    
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.4.6"
          terraform_wrapper: false
          # cli_config_credentials_token: ${{ secrets.TFE_TOKEN }}


      - name: Initialize Terraform
        working-directory: infra/envs/dev
        run: |
          cd synapse
          terraform init

      - name: Run Terraform Plan
        working-directory: infra/envs/dev
        env:
          ARM_SKIP_PROVIDER_REGISTRATION: true
        run: |
          cd synapse
          terraform plan -var-file='inputs.tfvars'

      - name: Deploy Azure resources
        working-directory: infra/envs/dev
        env:
          ARM_SKIP_PROVIDER_REGISTRATION: true
        run: |
          cd synapse
          terraform apply -var-file='inputs.tfvars' -auto-approve 

      - name: Export Terraform outputs
        working-directory: infra/envs/dev  
        run: |
          cd synapse
          echo "adminsgroupname=$(terraform output -raw adminsgroupname)" >> $GITHUB_ENV
          echo "developersgroupname=$(terraform output -raw developersgroupname)" >> $GITHUB_ENV
          echo "readersgroupname=$(terraform output -raw readersgroupname)">> $GITHUB_ENV
          echo "readerrolename=$(terraform output -raw readerrolename)">> $GITHUB_ENV
          echo "datawriterrolename=$(terraform output -raw datawriterrolename)">> $GITHUB_ENV
          echo "developerrolename=$(terraform output -raw developerrolename)">> $GITHUB_ENV
          echo "ownerRoleName=$(terraform output -raw ownerRoleName)">> $GITHUB_ENV
          echo "schemaName=$(terraform output -raw schemaName)">> $GITHUB_ENV
          echo "membername=$(terraform output -raw membername)">> $GITHUB_ENV

          echo "datafactoryIdName=$(terraform output -raw datafactoryIdName)">> $GITHUB_ENV
          echo "spnclientname=$(terraform output -raw spnclientname)">> $GITHUB_ENV
          echo "synapse_name=$(terraform output -raw synapse_name)">> $GITHUB_ENV
          echo "datalake_container_name=$(terraform output -raw datalakecontainername)">> $GITHUB_ENV
          echo "keyvaultName=$(terraform output -raw keyvaultName)">> $GITHUB_ENV
          echo "appshortcode=$(terraform output -raw app)">> $GITHUB_ENV
          
          echo "internalsqlservername=$(terraform output -raw internalsqlservername)">> $GITHUB_ENV
          echo "databasename=$(terraform output -raw databasename)">> $GITHUB_ENV
         
          
      - name: Generate Synapse SQL Scripts
        working-directory: infra/envs/dev
        shell: pwsh
        run: |
          cd synapse
          ./dwscript.ps1 -adminsgroupname $env:adminsgroupname -developersgroupname $env:developersgroupname -readersgroupname $env:readersgroupname -readerrolename $env:readerrolename -datawriterrolename $env:datawriterrolename -developerrolename $env:developerrolename -ownerRoleName $env:ownerRoleName -schemaName $env:schemaName -membername $env:membername -datafactoryIdName $env:datafactoryIdName -spnName $env:spnclientname
          get-childItem -Recurse -Filter "*.sql" |Select-Object Name,FullName  |Sort-Object Name

      - name: Generate external datasource Synapse SQL Scripts
        working-directory: infra/envs/dev
        shell: pwsh
        run: |
          cd synapse
          $secval=(az keyvault secret show --name "ServicePrincipal-ClientSecret" --vault-name $env:keyvaultName --query "value") 
          $clientid=(az ad sp list --display-name $env:spnclientname --query [0].appId)
          ./dwscriptExternal.ps1 -appshortcodename $env:appshortcode -spnclientid $clientid -spnclientsecret $secval -datalakename ${{ github.event.inputs.datalake_name }}  -datalakecontainername $env:datalake_container_name -fileformat ${{ github.event.inputs.synapse_externaldata_fileformat }} 
          get-childItem -Recurse -Filter "*.sql" |Select-Object Name,FullName  |Sort-Object Name

      - name: Validate and Install Az Moddule
        working-directory: infra/envs/dev
        shell: pwsh
        run: |  
          if (-not (Get-Module -Name Az))
          {
            Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
            Install-Module -Name Az -AllowClobber -Force
            Install-Module -Name Az.Synapse -AllowClobber -Force
          }

      - name: Run Workspace SQL Scripts
        working-directory: infra/envs/dev
        shell: pwsh
        run: |
          cd synapse
          $tenantid= (az ad sp list --display-name $env:spnclientname --query [0].appOwnerOrganizationId)
          write-output $tenantid
          $subid = (az account show --query "id")
          $subid = $subid.Replace('"',"")
          write-output $subid
          ./InvokeSQLScript.ps1 -subscriptionId $subid -tenantId ${{ secrets.ARM_TENANT_ID }} -mysecret ${{ secrets.APPLICATION_CLIENT_SECRET }} -synpaseName $env:synapse_name -sqlpoolname $env:internalsqlservername -clientId ${{ secrets.APPLICATION_CLIENT_ID }} -databasename $env:databasename
